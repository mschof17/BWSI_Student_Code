# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tello/State.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class State(genpy.Message):
  _md5sum = "6630f0e1fde411489f81f1f26bbffa96"
  _type = "tello/State"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Twist speed
# linear: x, y, z
# angular: x (roll), y (pitch), z (yaw)

geometry_msgs/Vector3 acc
# x, y, z acc

int32 low_temp # deg C
float32 temp
int32 high_temp

int32 height # cm
int32 dist_tof
float32 barometer

int32 flight_time   # time the motors have been active, seconds
int32 battery # 0-100

bool is_flying
================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['speed','acc','low_temp','temp','high_temp','height','dist_tof','barometer','flight_time','battery','is_flying']
  _slot_types = ['geometry_msgs/Twist','geometry_msgs/Vector3','int32','float32','int32','int32','int32','float32','int32','int32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       speed,acc,low_temp,temp,high_temp,height,dist_tof,barometer,flight_time,battery,is_flying

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(State, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.speed is None:
        self.speed = geometry_msgs.msg.Twist()
      if self.acc is None:
        self.acc = geometry_msgs.msg.Vector3()
      if self.low_temp is None:
        self.low_temp = 0
      if self.temp is None:
        self.temp = 0.
      if self.high_temp is None:
        self.high_temp = 0
      if self.height is None:
        self.height = 0
      if self.dist_tof is None:
        self.dist_tof = 0
      if self.barometer is None:
        self.barometer = 0.
      if self.flight_time is None:
        self.flight_time = 0
      if self.battery is None:
        self.battery = 0
      if self.is_flying is None:
        self.is_flying = False
    else:
      self.speed = geometry_msgs.msg.Twist()
      self.acc = geometry_msgs.msg.Vector3()
      self.low_temp = 0
      self.temp = 0.
      self.high_temp = 0
      self.height = 0
      self.dist_tof = 0
      self.barometer = 0.
      self.flight_time = 0
      self.battery = 0
      self.is_flying = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9dif3if2iB().pack(_x.speed.linear.x, _x.speed.linear.y, _x.speed.linear.z, _x.speed.angular.x, _x.speed.angular.y, _x.speed.angular.z, _x.acc.x, _x.acc.y, _x.acc.z, _x.low_temp, _x.temp, _x.high_temp, _x.height, _x.dist_tof, _x.barometer, _x.flight_time, _x.battery, _x.is_flying))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.speed is None:
        self.speed = geometry_msgs.msg.Twist()
      if self.acc is None:
        self.acc = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 105
      (_x.speed.linear.x, _x.speed.linear.y, _x.speed.linear.z, _x.speed.angular.x, _x.speed.angular.y, _x.speed.angular.z, _x.acc.x, _x.acc.y, _x.acc.z, _x.low_temp, _x.temp, _x.high_temp, _x.height, _x.dist_tof, _x.barometer, _x.flight_time, _x.battery, _x.is_flying,) = _get_struct_9dif3if2iB().unpack(str[start:end])
      self.is_flying = bool(self.is_flying)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9dif3if2iB().pack(_x.speed.linear.x, _x.speed.linear.y, _x.speed.linear.z, _x.speed.angular.x, _x.speed.angular.y, _x.speed.angular.z, _x.acc.x, _x.acc.y, _x.acc.z, _x.low_temp, _x.temp, _x.high_temp, _x.height, _x.dist_tof, _x.barometer, _x.flight_time, _x.battery, _x.is_flying))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.speed is None:
        self.speed = geometry_msgs.msg.Twist()
      if self.acc is None:
        self.acc = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 105
      (_x.speed.linear.x, _x.speed.linear.y, _x.speed.linear.z, _x.speed.angular.x, _x.speed.angular.y, _x.speed.angular.z, _x.acc.x, _x.acc.y, _x.acc.z, _x.low_temp, _x.temp, _x.high_temp, _x.height, _x.dist_tof, _x.barometer, _x.flight_time, _x.battery, _x.is_flying,) = _get_struct_9dif3if2iB().unpack(str[start:end])
      self.is_flying = bool(self.is_flying)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9dif3if2iB = None
def _get_struct_9dif3if2iB():
    global _struct_9dif3if2iB
    if _struct_9dif3if2iB is None:
        _struct_9dif3if2iB = struct.Struct("<9dif3if2iB")
    return _struct_9dif3if2iB
