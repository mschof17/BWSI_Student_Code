// Generated by gencpp from file tello/State.msg
// DO NOT EDIT!


#ifndef TELLO_MESSAGE_STATE_H
#define TELLO_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Vector3.h>

namespace tello
{
template <class ContainerAllocator>
struct State_
{
  typedef State_<ContainerAllocator> Type;

  State_()
    : speed()
    , acc()
    , low_temp(0)
    , temp(0.0)
    , high_temp(0)
    , height(0)
    , dist_tof(0)
    , barometer(0.0)
    , flight_time(0)
    , battery(0)
    , is_flying(false)  {
    }
  State_(const ContainerAllocator& _alloc)
    : speed(_alloc)
    , acc(_alloc)
    , low_temp(0)
    , temp(0.0)
    , high_temp(0)
    , height(0)
    , dist_tof(0)
    , barometer(0.0)
    , flight_time(0)
    , battery(0)
    , is_flying(false)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _speed_type;
  _speed_type speed;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _acc_type;
  _acc_type acc;

   typedef int32_t _low_temp_type;
  _low_temp_type low_temp;

   typedef float _temp_type;
  _temp_type temp;

   typedef int32_t _high_temp_type;
  _high_temp_type high_temp;

   typedef int32_t _height_type;
  _height_type height;

   typedef int32_t _dist_tof_type;
  _dist_tof_type dist_tof;

   typedef float _barometer_type;
  _barometer_type barometer;

   typedef int32_t _flight_time_type;
  _flight_time_type flight_time;

   typedef int32_t _battery_type;
  _battery_type battery;

   typedef uint8_t _is_flying_type;
  _is_flying_type is_flying;





  typedef boost::shared_ptr< ::tello::State_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tello::State_<ContainerAllocator> const> ConstPtr;

}; // struct State_

typedef ::tello::State_<std::allocator<void> > State;

typedef boost::shared_ptr< ::tello::State > StatePtr;
typedef boost::shared_ptr< ::tello::State const> StateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tello::State_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tello::State_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tello::State_<ContainerAllocator1> & lhs, const ::tello::State_<ContainerAllocator2> & rhs)
{
  return lhs.speed == rhs.speed &&
    lhs.acc == rhs.acc &&
    lhs.low_temp == rhs.low_temp &&
    lhs.temp == rhs.temp &&
    lhs.high_temp == rhs.high_temp &&
    lhs.height == rhs.height &&
    lhs.dist_tof == rhs.dist_tof &&
    lhs.barometer == rhs.barometer &&
    lhs.flight_time == rhs.flight_time &&
    lhs.battery == rhs.battery &&
    lhs.is_flying == rhs.is_flying;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tello::State_<ContainerAllocator1> & lhs, const ::tello::State_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tello

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tello::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tello::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tello::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tello::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tello::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tello::State_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tello::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6630f0e1fde411489f81f1f26bbffa96";
  }

  static const char* value(const ::tello::State_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6630f0e1fde41148ULL;
  static const uint64_t static_value2 = 0x9f81f1f26bbffa96ULL;
};

template<class ContainerAllocator>
struct DataType< ::tello::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tello/State";
  }

  static const char* value(const ::tello::State_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tello::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Twist speed\n"
"# linear: x, y, z\n"
"# angular: x (roll), y (pitch), z (yaw)\n"
"\n"
"geometry_msgs/Vector3 acc\n"
"# x, y, z acc\n"
"\n"
"int32 low_temp # deg C\n"
"float32 temp\n"
"int32 high_temp\n"
"\n"
"int32 height # cm\n"
"int32 dist_tof\n"
"float32 barometer\n"
"\n"
"int32 flight_time   # time the motors have been active, seconds\n"
"int32 battery # 0-100\n"
"\n"
"bool is_flying\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::tello::State_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tello::State_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed);
      stream.next(m.acc);
      stream.next(m.low_temp);
      stream.next(m.temp);
      stream.next(m.high_temp);
      stream.next(m.height);
      stream.next(m.dist_tof);
      stream.next(m.barometer);
      stream.next(m.flight_time);
      stream.next(m.battery);
      stream.next(m.is_flying);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct State_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tello::State_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tello::State_<ContainerAllocator>& v)
  {
    s << indent << "speed: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.speed);
    s << indent << "acc: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.acc);
    s << indent << "low_temp: ";
    Printer<int32_t>::stream(s, indent + "  ", v.low_temp);
    s << indent << "temp: ";
    Printer<float>::stream(s, indent + "  ", v.temp);
    s << indent << "high_temp: ";
    Printer<int32_t>::stream(s, indent + "  ", v.high_temp);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "dist_tof: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dist_tof);
    s << indent << "barometer: ";
    Printer<float>::stream(s, indent + "  ", v.barometer);
    s << indent << "flight_time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.flight_time);
    s << indent << "battery: ";
    Printer<int32_t>::stream(s, indent + "  ", v.battery);
    s << indent << "is_flying: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_flying);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TELLO_MESSAGE_STATE_H
